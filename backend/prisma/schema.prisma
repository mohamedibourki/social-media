// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  nom         String   @db.String
  description String?  @db.String
  pole_id     String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Club {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  description         String?
  category            String
  president           String[]  @db.ObjectId
  vicePresident       String?   @db.ObjectId
  members             String[]  @db.ObjectId
  supervisor          String[]  @db.ObjectId
  meetingDays         String[]
  meetingTimeStart    DateTime
  meetingTimeEnd      DateTime
  room                String
  logoUrl             String?
  isActive            Boolean   @default(true)
  tagline             String?
  achievements        String[]
  events              String[]  @db.ObjectId
  applicationRequired Boolean   @default(false)
  maxMembers          Int?
  memberRoles         Json?
  contactEmail        String?
  discordServerUrl    String?
  instagramHandle     String?
  websiteUrl          String?
  advisorName         String?
  budget              Float?
  lastAuditDate       DateTime?
  memberCount         Int?
  eventCount          Int?
  engagementScore     Float?
  createdBy           String[]  @db.ObjectId
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Pole {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  nom         String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SuperAdmin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName  String
  email     String   @unique
  password  String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subject {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  class_id     String   @db.ObjectId
  professor_id String?  @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Student {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName    String
  schoolEmail String   @unique
  password    String
  birthDay    DateTime
  gender      String
  className   String   @db.ObjectId
  role        String   @default("Student")
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName  String
  email     String   @unique
  password  String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  author    String   @db.ObjectId
  event     String   @db.ObjectId
  likes     Json?
  comments  String[] @db.ObjectId
  media     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      String   @db.ObjectId
  post      String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  date        DateTime
  location    String
  organizer   String   @db.ObjectId
  posts       String[] @db.ObjectId
  attendees   String[] @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  text        String
  authorId    String   @db.ObjectId
  authorModel String
  post        String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Class {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  course         String
  group          String
  students       String[] @db.ObjectId
  subjects       String[]
  teachers       String[] @db.ObjectId
  semester       Int
  leader         String   @db.ObjectId
  superVisor     String   @db.ObjectId
  traineeManager String   @db.ObjectId
  schedules      String[] @db.ObjectId
  department     String?
  status         String   @default("active")
  location       String?
  notes          String?
  createdBy      String   @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Resource {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  type        String
  category    String
  subject     String
  name        String
  description String?   @default("")
  tags        String[]
  data        String
  size        Int
  contentType String
  isPublic    Boolean   @default(false)
  accessList  String[]
  downloadUrl String?   @default("")
  isArchived  Boolean   @default(false)
  version     String?   @default("1.0")
  views       Int       @default(0)
  downloads   Int       @default(0)
  expiresAt   DateTime?
  createdBy   String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ClassSchedule {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  subject           String
  teacher           String    @db.ObjectId
  group             String
  students          String[]  @db.ObjectId
  room              String
  tags              String[]
  day               String
  locationType      String
  onlineLink        String?
  startTime         DateTime
  endTime           DateTime
  color             String
  durationInMinutes Int?
  notes             String?
  status            String    @default("Scheduled")
  repeatPattern     String    @default("None")
  repeatUntil       DateTime?
  assignmentType    String?
  createdBy         String    @db.ObjectId
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}
